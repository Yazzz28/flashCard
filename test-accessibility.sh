#!/bin/bash

# Script de test d'accessibilit√© pour WildCards
# Ce script lance une s√©rie de tests automatis√©s pour v√©rifier la conformit√© aux normes d'accessibilit√©

echo "üöÄ D√©but des tests d'accessibilit√© pour WildCards"
echo "================================================"

# V√©rifier si Node.js est install√©
if ! command -v node &> /dev/null; then
    echo "‚ùå Node.js n'est pas install√©. Veuillez l'installer pour continuer."
    exit 1
fi

# V√©rifier si npm est install√©
if ! command -v npm &> /dev/null; then
    echo "‚ùå npm n'est pas install√©. Veuillez l'installer pour continuer."
    exit 1
fi

echo "‚úÖ Node.js et npm d√©tect√©s"

# Installer les d√©pendances de test si n√©cessaire
echo "üì¶ Installation des outils de test d'accessibilit√©..."

# Installer axe-core CLI globalement si pas d√©j√† install√©
if ! command -v axe &> /dev/null; then
    echo "Installation de axe-core..."
    npm install -g @axe-core/cli
fi

# Installer html-validate si pas d√©j√† install√©
if ! command -v html-validate &> /dev/null; then
    echo "Installation de html-validate..."
    npm install -g html-validate
fi

echo "‚úÖ Outils install√©s"

# Test 1: Validation HTML
echo ""
echo "üîç Test 1: Validation HTML W3C"
echo "--------------------------------"

if command -v html-validate &> /dev/null; then
    html-validate index.html
    if [ $? -eq 0 ]; then
        echo "‚úÖ HTML valide"
    else
        echo "‚ùå Erreurs de validation HTML d√©tect√©es"
    fi
else
    echo "‚ö†Ô∏è  html-validate non disponible, validation HTML ignor√©e"
fi

# Test 2: Tests axe-core (n√©cessite un serveur local)
echo ""
echo "üîç Test 2: Tests d'accessibilit√© automatis√©s (axe-core)"
echo "--------------------------------------------------------"

# D√©marrer un serveur HTTP simple en arri√®re-plan
if command -v python3 &> /dev/null; then
    echo "D√©marrage du serveur de test sur le port 8080..."
    python3 -m http.server 8080 &
    SERVER_PID=$!
    sleep 2
    
    # Tester avec axe-core
    if command -v axe &> /dev/null; then
        echo "Ex√©cution des tests axe-core..."
        axe http://localhost:8080 --timeout 10000
        if [ $? -eq 0 ]; then
            echo "‚úÖ Tests axe-core r√©ussis"
        else
            echo "‚ùå Violations d'accessibilit√© d√©tect√©es par axe-core"
        fi
    else
        echo "‚ö†Ô∏è  axe-core non disponible"
    fi
    
    # Arr√™ter le serveur
    kill $SERVER_PID 2>/dev/null
    
elif command -v python &> /dev/null; then
    echo "D√©marrage du serveur de test sur le port 8080..."
    python -m SimpleHTTPServer 8080 &
    SERVER_PID=$!
    sleep 2
    
    # Tester avec axe-core
    if command -v axe &> /dev/null; then
        echo "Ex√©cution des tests axe-core..."
        axe http://localhost:8080 --timeout 10000
        if [ $? -eq 0 ]; then
            echo "‚úÖ Tests axe-core r√©ussis"
        else
            echo "‚ùå Violations d'accessibilit√© d√©tect√©es par axe-core"
        fi
    else
        echo "‚ö†Ô∏è  axe-core non disponible"
    fi
    
    # Arr√™ter le serveur
    kill $SERVER_PID 2>/dev/null
else
    echo "‚ö†Ô∏è  Python non disponible, tests axe-core ignor√©s"
    echo "   Vous pouvez d√©marrer manuellement un serveur et tester avec:"
    echo "   axe http://localhost:8080"
fi

# Test 3: V√©rification des points cl√©s d'accessibilit√©
echo ""
echo "üîç Test 3: V√©rification manuelle des crit√®res d'accessibilit√©"
echo "--------------------------------------------------------------"

echo "üìã Liste de v√©rification:"

# V√©rifier la pr√©sence d'√©l√©ments cl√©s
if grep -q 'aria-' index.html; then
    echo "‚úÖ Attributs ARIA pr√©sents"
else
    echo "‚ùå Aucun attribut ARIA trouv√©"
fi

if grep -q 'role=' index.html; then
    echo "‚úÖ R√¥les ARIA pr√©sents"
else
    echo "‚ùå Aucun r√¥le ARIA trouv√©"
fi

if grep -q 'tabindex=' index.html; then
    echo "‚úÖ Gestion du tabindex pr√©sente"
else
    echo "‚ö†Ô∏è  Aucun tabindex trouv√© (peut √™tre normal)"
fi

if grep -q 'aria-live=' index.html; then
    echo "‚úÖ R√©gions live pr√©sentes"
else
    echo "‚ùå Aucune r√©gion live trouv√©e"
fi

if grep -q 'sr-only' index.html; then
    echo "‚úÖ Texte pour lecteurs d'√©cran pr√©sent"
else
    echo "‚ùå Aucun texte sr-only trouv√©"
fi

if grep -q 'skip-link' index.html; then
    echo "‚úÖ Liens de navigation rapide pr√©sents"
else
    echo "‚ùå Aucun lien de navigation rapide trouv√©"
fi

# V√©rifier les raccourcis clavier dans le JavaScript
if grep -q 'keydown' src/script.js; then
    echo "‚úÖ Gestion des √©v√©nements clavier pr√©sente"
else
    echo "‚ùå Aucune gestion clavier trouv√©e"
fi

if grep -q 'focus' src/script.js; then
    echo "‚úÖ Gestion du focus pr√©sente"
else
    echo "‚ùå Aucune gestion du focus trouv√©e"
fi

# Test 4: V√©rification CSS d'accessibilit√©
echo ""
echo "üîç Test 4: V√©rification CSS d'accessibilit√©"
echo "--------------------------------------------"

if grep -q 'prefers-reduced-motion' assets/css/styles.css; then
    echo "‚úÖ Support prefers-reduced-motion pr√©sent"
else
    echo "‚ùå Support prefers-reduced-motion manquant"
fi

if grep -q 'focus-visible' assets/css/styles.css; then
    echo "‚úÖ Styles focus-visible pr√©sents"
else
    echo "‚ùå Styles focus-visible manquants"
fi

if grep -q 'outline:' assets/css/styles.css; then
    echo "‚úÖ Styles d'outline personnalis√©s pr√©sents"
else
    echo "‚ö†Ô∏è  Aucun style d'outline personnalis√© trouv√©"
fi

if grep -q 'prefers-high-contrast' assets/css/styles.css; then
    echo "‚úÖ Support contraste √©lev√© pr√©sent"
else
    echo "‚ö†Ô∏è  Support contraste √©lev√© non trouv√©"
fi

# Test 5: Instructions pour tests manuels
echo ""
echo "üîç Test 5: Tests manuels recommand√©s"
echo "-------------------------------------"
echo "Pour compl√©ter les tests automatis√©s, effectuez ces v√©rifications manuelles:"
echo ""
echo "üîß Navigation au clavier:"
echo "   1. Testez Tab/Shift+Tab pour naviguer entre tous les √©l√©ments"
echo "   2. Testez les fl√®ches haut/bas pour naviguer entre les cartes"
echo "   3. Testez Entr√©e/Espace pour activer les cartes"
echo "   4. Testez √âchap pour fermer les modales"
echo "   5. Testez les raccourcis Ctrl+F, Ctrl+T, etc."
echo ""
echo "üîß Lecteur d'√©cran:"
echo "   1. Testez avec NVDA/JAWS (Windows) ou VoiceOver (Mac)"
echo "   2. V√©rifiez les annonces lors de la recherche"
echo "   3. V√©rifiez les annonces lors du changement de progression"
echo "   4. V√©rifiez la lecture des cartes et de leur √©tat"
echo ""
echo "üîß Zoom et responsive:"
echo "   1. Testez le zoom jusqu'√† 200%"
echo "   2. V√©rifiez l'absence de d√©filement horizontal"
echo "   3. Testez sur diff√©rentes tailles d'√©cran"
echo ""
echo "üîß Contraste:"
echo "   1. Testez en mode sombre et clair"
echo "   2. V√©rifiez la visibilit√© du focus"
echo "   3. Testez avec des simulateurs de daltonisme"

echo ""
echo "üéâ Tests d'accessibilit√© termin√©s!"
echo "=================================="
echo ""
echo "Pour un audit complet, utilisez √©galement:"
echo "- Lighthouse (onglet Accessibilit√©)"
echo "- WAVE Web Accessibility Evaluation Tool"
echo "- axe DevTools extension"
echo "- Tests avec de vrais utilisateurs de technologies d'assistance"
echo ""
echo "üìö Consultez ACCESSIBILITY.md pour plus d'informations"
